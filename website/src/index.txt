root	index	SignPuddle 3	https://signpuddle.net/v3
	line	> v3.0.0
	line	
	line	+ [txt](../src/index.txt) - ApiTxt format
	line	+ [json](../src/index.json) - array of JSON objects
	line	+ [html](../api/index.html) - HTML API Interface
	line	+ [md](../docs/index.md) - API Blueprint
	line	+ [htm](../docs/index.htm) - Stand Alone HTML
group	tools	Resources related to tools
	route	/tools/test{?text}	Test with input
		line	A general purpose function for testing
		parameter	text	S10000	string	Input for testing
		method	GET	Get test results
			code	$timein = microtime(true);
			code	$app->contentType('text/plain;charset=utf-8');
			code	$test = SignWriting\test($text);
			code	$searchTime = searchtime($timein);
			code	header("Search-Time: " . $searchTime);
			code	echo $test;
			response	200	text/plain
				line	test output
	route	/tools/define	Character definition tree
		line	The definition tree for character mapping
		method	GET	Get main define
			code	$timein = microtime(true);
			code	$app->contentType('text/plain;charset=utf-8');
			code	$define = SignWriting\define();
			code	$searchTime = searchtime($timein);
			code	header("Search-Time: " . $searchTime);
			code	echo json_pretty($define);
			response	200	text/plain
				line	{
				line	  "utf-8": {},
				line	  "utf-16": {},
				line	  "utf-32": {},
				line	  "fsw": {},
				line	  "swu": {},
				line	  "style": {}
				line	}
	route	/tools/define/{section}	Section definition
		line	A section of the definition tree
		parameter	section	fsw	string	The name of section
		method	GET	Get section define
			code	global $regex_define;
			code	if ($section == "regex"){
			code	  return $regex_define();
			code	}
			code	global $sample_define;
			code	if ($section == "sample"){
			code	  return $sample_define();
			code	}
			code	$timein = microtime(true);
			code	$app->contentType('text/plain;charset=utf-8');
			code	$define = SignWriting\define($section);
			code	$searchTime = searchtime($timein);
			code	header("Search-Time: " . $searchTime);
			code	echo json_pretty($define);
			response	200	text/plain
				line	{
				line	  "sign": [],
				line	  "spatial": [],
				line	  "symbol": [],
				line	  "coord": [],
				line	  "prefix": [],
				line	  "box": [],
				line	  "query": []
				line	}
	route	/tools/define/{section}/{part}	Part definition
		line	A part of the section definition
		parameter	section	swu	string	The name of section
		parameter	part	symbol	string	The part of the definition
		method	GET	Get part define
			code	$timein = microtime(true);
			code	$app->contentType('text/plain;charset=utf-8');
			code	$define = SignWriting\define($section,$part);
			code	$searchTime = searchtime($timein);
			code	header("Search-Time: " . $searchTime);
			code	echo json_pretty($define);
			response	200	text/plain
				line	[
				line	  "individual symbol",
				line	  "S10000",
				line	  "[\\x{40000}-\\x{4F428}]"
				line	]
	route	/tools/parse{?text,utf}	Parse text
		line	A function to analyze text and parse it into individual components
		parameter	text	S10000	string	The text to parse
		parameter	utf	32	string	The UTF number of 8, 16, 32 or 'x'
		method	GET	Get parse results
			code	$timein = microtime(true);
			code	if (!in_array($utf,[8,16,32,'x'])){
			code	  $utf = 16;
			code	}
			code	$app->contentType('text/plain;charset=utf-8');
			code	$parse = SignWriting\parse($text);
			code	$searchTime = searchtime($timein);
			code	header("Search-Time: " . $searchTime);
			code	$json = json_pretty($parse);
			code	echo SignWriting\cast($json,$utf);
			response	200	text/plain
				line	parse results of text
	route	/tools/encode{?text,slash}	Encode text
		line	A function to encode SignWriting in Unicode (SWU) as UTF-16
		parameter	text	\x{1D800}	string	The text to encode
		parameter	slash	1	number	The number of slashes for escaping
		method	GET	Get encoded query string
			code	$timein = microtime(true);
			code	$app->contentType('text/plain;charset=utf-8');
			code	$encode = SignWriting\encode($text,$slash);
			code	$searchTime = searchtime($timein);
			code	header("Search-Time: " . $searchTime);
			code	echo $encode;
			response	200	text/plain
				line	\uD836\uDC00
	route	/tools/decode{?text}	Decode text
		line	A function to decode SignWriting in Unicode (SWU) from UTF-16
		parameter	text	\\uD836\\uDC00	string	The text to decode
		method	GET	Get decoded query string
			code	$timein = microtime(true);
			code	$app->contentType('text/plain;charset=utf-8');
			code	$decode = SignWriting\decode($text);
			code	$searchTime = searchtime($timein);
			code	header("Search-Time: " . $searchTime);
			code	echo $decode;
			response	200	text/plain
				line	\x{1D800}
	route	/tools/utf8{?text}	UTF-8 encode text
		parameter	text	\x{1D800}	string	The text to encode
		method	GET	Get utf-8 encoded query string
			code	$timein = microtime(true);
			code	$app->contentType('text/plain;charset=utf-8');
			code	
			code	$encode = SignWriting\utf8($text);
			code	$searchTime = searchtime($timein);
			code	header("Search-Time: " . $searchTime);
			code	echo $encode;
			response	200	text/plain
				line	%F0%9D%A0%80
group	fsw	Resources related to Formal SignWriting in ASCII (FSW)
	route	/fsw{?text,style}	FSW Word
		parameter	text	AS20310S26b02S33100M521x547S33100482x483S20310506x500S26b02503x520	string	The name of sign
		parameter	style	true	boolean,optional	Flag to include styling string
		method	GET	first FSW string
			code	$timein = microtime(true);
			code	$fsw = SignWriting\fsw($text,$style);
			code	$searchTime = searchtime($timein);
			code	header("Search-Time: " . $searchTime);
			code	echo $fsw;
			request	one Formal SignWriting in ASCII string
				response	200	text/plain;charset=utf-8
					line	AS20310S26b02S33100M521x547S33100482x483S20310506x500S26b02503x520
	route	/fsw/all{?text,style}	FSW Text
		parameter	text	AS20310S26b02S33100M521x547S33100482x483S20310506x500S26b02503x520	string	The name of sign
		parameter	style	1	number	Flag to include styling string
		method	GET	all FSW strings
			code	$timein = microtime(true);
			code	$fsw = SignWriting\fswAll($text,$style);
			code	$searchTime = searchtime($timein);
			code	header("Search-Time: " . $searchTime);
			code	echo $fsw;
			request	many Formal SignWriting in ASCII string
				response	200	text/plain;charset=utf-8
					line	AS20310S26b02S33100M521x547S33100482x483S20310506x500S26b02503x520
	route	/fsw/swu{?text}	FSW to SWU
		parameter	text	AS20310S26b02S33100M521x547S33100482x483S20310506x500S26b02503x520	string	The name of sign
		method	GET	text with FSW strings
			code	$timein = microtime(true);
			code	$swu = SignWriting\fsw2swu($text);
			code	$app->contentType('text/plain;charset=utf-8');
			code	$searchTime = searchtime($timein);
			code	header("Search-Time: " . $searchTime);
			code	echo $swu;
			request	original text with Formal SignWriting in ASCII inside
				response	200	text/plain;charset=utf-8
					line	AS20310S26b02S33100M521x547S33100482x483S20310506x500S26b02503x520
	route	/fsw/svg/{text}	SVG image
		line	Create a stand-alone SVG image using Formal SignWriting in ASCII (FSW)
		parameter	text	AS20310S26b02S33100M521x547S33100482x483S20310506x500S26b02503x520	string	The name of sign
		method	GET	retrieve stand-alone SVG image
			code	$timein = microtime(true);
			code	$req = $app->request();
			code	if ($req->get('throwStatus')=='500') {haltNoDatabase();}
			code	$app->contentType('image/svg+xml;charset=utf-8');
			code	$svg = SignWriting\svg($text);
			code	$searchTime = searchtime($timein);
			code	header("Search-Time: " . $searchTime);
			code	echo $svg;
			request	collection text
				response	200	image/svg+xml;charset=utf-8
					line	<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="39" height="64" viewBox="482 483 39 64">
					line	  <text style="font-size:0%;">AS20310S26b02S33100M521x547S33100482x483S20310506x500S26b02503x520</text>
					line	  <svg x='482' y='483'><g transform="translate(0.149874875465,34.7500790925) scale(0.00988906872676,-0.00988956850125)"><path class="sym-line" fill="black" d="M1528 3484 c-592 -92 -1088 -447 -1348 -963 -125 -249 -180 -485 -180 -771 0 -480 183 -911 529 -1242 350 -336 780 -508 1271 -508 451 0 864 150 1193 434 326 281 517 620 591 1051 21 121 21 409 0 530 -43 252 -114 444 -237 639 -282 453 -741 750 -1284 831 -127 19 -413 18 -535 -1z m607 -173 c583 -126 1038 -523 1224 -1069 59 -173 75 -277 75 -492 0 -165 -3 -211 -22 -300 -71 -327 -228 -611 -458 -829 -186 -177 -381 -295 -614 -374 -176 -60 -282 -78 -490 -84 -247 -7 -416 19 -628 97 -549 201 -944 674 -1043 1250 -17 97 -17 383 0 480 99 576 495 1050 1043 1250 105 38 177 58 303 81 143 26 467 21 610 -10z M1720 1800 l0 -600 80 0 80 0 0 600 0 600 -80 0 -80 0 0 -600z"/></g></svg>
					line	  <svg x='506' y='500'><g transform="translate(0.0,15.0) scale(0.01,-0.01)"><path class="sym-fill" fill="white" d="M200 750 l0 -550 300 0 300 0 0 550 0 550 -300 0 -300 0 0 -550z"/><path class="sym-line" fill="black" d="M0 750 l0 -750 750 0 750 0 0 750 0 750 -750 0 -750 0 0 -750z m800 0 l0 -550 -300 0 -300 0 0 550 0 550 300 0 300 0 0 -550z"/></g></svg>
					line	  <svg x='503' y='520'><g transform="translate(0.196840829729,26.6999810561) scale(0.00975214136907,-0.00983390502079)"><path class="sym-line" fill="black" d="M345 2350 l-350 -350 325 -325 325 -325 -325 -325 -325 -325 353 -353 352 -352 0 303 0 302 350 0 350 0 0 100 0 100 -350 0 -350 0 0 550 0 550 350 0 350 0 0 100 0 100 -350 0 -350 0 -2 300 -3 300 -350 -350z M1600 1350 l0 -1350 100 0 100 0 0 1350 0 1350 -100 0 -100 0 0 -1350z"/></g></svg>
					line	</svg>
	route	/fsw/svg/font/{text}	SVG with font
		line	Create an SVG with font using Formal SignWriting in ASCII (FSW)
		parameter	text	AS20310S26b02S33100M521x547S33100482x483S20310506x500S26b02503x520	string	The name of sign
		method	GET	retrieve SVG with font
			code	$timein = microtime(true);
			code	$req = $app->request();
			code	if ($req->get('throwStatus')=='500') {haltNoDatabase();}
			code	$app->contentType('image/svg+xml;charset=utf-8');
			code	$svg = SignWriting\svg($text,true);
			code	$searchTime = searchtime($timein);
			code	header("Search-Time: " . $searchTime);
			code	echo $svg;
			request	collection text
				response	200	image/svg+xml;charset=utf-8
					line	<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="49" height="69" viewBox="476 466 49 69">
					line	  <text font-size="0">AS10011S10019S2e704S2e748M525x535S2e748483x510S10011501x466S2e704510x500S10019476x475</text>
					line	  <g transform="translate(483,510)"><text class="sym-fill" style="pointer-events:none;font-family:'SuttonSignWritingFill';font-size:30px;fill:white;">􋛩</text><text class="sym-line" style="pointer-events:none;font-family:'SuttonSignWritingLine';font-size:30px;fill:black;">󻛩</text></g>
					line	  <g transform="translate(501,466)"><text class="sym-fill" style="pointer-events:none;font-family:'SuttonSignWritingFill';font-size:30px;fill:white;">􀀒</text><text class="sym-line" style="pointer-events:none;font-family:'SuttonSignWritingLine';font-size:30px;fill:black;">󰀒</text></g>
					line	  <g transform="translate(510,500)"><text class="sym-fill" style="pointer-events:none;font-family:'SuttonSignWritingFill';font-size:30px;fill:white;">􋚥</text><text class="sym-line" style="pointer-events:none;font-family:'SuttonSignWritingLine';font-size:30px;fill:black;">󻚥</text></g>
					line	  <g transform="translate(476,475)"><text class="sym-fill" style="pointer-events:none;font-family:'SuttonSignWritingFill';font-size:30px;fill:white;">􀀚</text><text class="sym-line" style="pointer-events:none;font-family:'SuttonSignWritingLine';font-size:30px;fill:black;">󰀚</text></g>
					line	</svg>
group	swu	Resources related to Formal SignWriting in ASCII (SWU)
	route	/swu{?text,style}	SWU Word
		parameter	text	AS20310S26b02S33100M521x547S33100482x483S20310506x500S26b02503x520	string	The name of sign
		parameter	style	1	number	Flag to include styling string
		method	GET	first SWU string
			code	$timein = microtime(true);
			code	$swu = SignWriting\swu($text,$style);
			code	$searchTime = searchtime($timein);
			code	header("Search-Time: " . $searchTime);
			code	echo $swu;
			request	one Formal SignWriting in ASCII string
				response	200	text/plain;charset=utf-8
					line	AS20310S26b02S33100M521x547S33100482x483S20310506x500S26b02503x520
	route	/swu/all{?text,style}	SWU Text
		parameter	text	AS20310S26b02S33100M521x547S33100482x483S20310506x500S26b02503x520	string	The name of sign
		parameter	style	1	number	Flag to include styling string
		method	GET	all SWU strings
			code	$timein = microtime(true);
			code	$swu = SignWriting\swuAll($text,$style);
			code	$searchTime = searchtime($timein);
			code	header("Search-Time: " . $searchTime);
			code	echo $swu;
			request	many Formal SignWriting in ASCII string
				response	200	text/plain;charset=utf-8
					line	AS20310S26b02S33100M521x547S33100482x483S20310506x500S26b02503x520
	route	/swu/fsw{?text}	SWU to FSW
		parameter	text	AS20310S26b02S33100M521x547S33100482x483S20310506x500S26b02503x520	string	The name of sign
		method	GET	text with SWU strings
			code	$timein = microtime(true);
			code	$fsw = SignWriting\swu2fsw($text);
			code	$app->contentType('text/plain;charset=utf-8');
			code	$searchTime = searchtime($timein);
			code	header("Search-Time: " . $searchTime);
			code	echo $fsw;
			request	original text with Formal SignWriting in ASCII inside
				response	200	text/plain;charset=utf-8
					line	AS20310S26b02S33100M521x547S33100482x483S20310506x500S26b02503x520
	route	/swu/svg/{text}	SVG image
		line	Create a stand-alone SVG image using Formal SignWriting in ASCII (SWU)
		parameter	text	AS20310S26b02S33100M521x547S33100482x483S20310506x500S26b02503x520	string	The name of sign
		method	GET	retrieve stand-alone SVG image
			code	$timein = microtime(true);
			code	$req = $app->request();
			code	if ($req->get('throwStatus')=='500') {haltNoDatabase();}
			code	$app->contentType('image/svg+xml;charset=utf-8');
			code	$svg = SignWriting\svg($text);
			code	$searchTime = searchtime($timein);
			code	header("Search-Time: " . $searchTime);
			code	echo $svg;
			request	collection text
				response	200	image/svg+xml;charset=utf-8
					line	<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="39" height="64" viewBox="482 483 39 64">
					line	  <text style="font-size:0%;">AS20310S26b02S33100M521x547S33100482x483S20310506x500S26b02503x520</text>
					line	  <svg x='482' y='483'><g transform="translate(0.149874875465,34.7500790925) scale(0.00988906872676,-0.00988956850125)"><path class="sym-line" fill="black" d="M1528 3484 c-592 -92 -1088 -447 -1348 -963 -125 -249 -180 -485 -180 -771 0 -480 183 -911 529 -1242 350 -336 780 -508 1271 -508 451 0 864 150 1193 434 326 281 517 620 591 1051 21 121 21 409 0 530 -43 252 -114 444 -237 639 -282 453 -741 750 -1284 831 -127 19 -413 18 -535 -1z m607 -173 c583 -126 1038 -523 1224 -1069 59 -173 75 -277 75 -492 0 -165 -3 -211 -22 -300 -71 -327 -228 -611 -458 -829 -186 -177 -381 -295 -614 -374 -176 -60 -282 -78 -490 -84 -247 -7 -416 19 -628 97 -549 201 -944 674 -1043 1250 -17 97 -17 383 0 480 99 576 495 1050 1043 1250 105 38 177 58 303 81 143 26 467 21 610 -10z M1720 1800 l0 -600 80 0 80 0 0 600 0 600 -80 0 -80 0 0 -600z"/></g></svg>
					line	  <svg x='506' y='500'><g transform="translate(0.0,15.0) scale(0.01,-0.01)"><path class="sym-fill" fill="white" d="M200 750 l0 -550 300 0 300 0 0 550 0 550 -300 0 -300 0 0 -550z"/><path class="sym-line" fill="black" d="M0 750 l0 -750 750 0 750 0 0 750 0 750 -750 0 -750 0 0 -750z m800 0 l0 -550 -300 0 -300 0 0 550 0 550 300 0 300 0 0 -550z"/></g></svg>
					line	  <svg x='503' y='520'><g transform="translate(0.196840829729,26.6999810561) scale(0.00975214136907,-0.00983390502079)"><path class="sym-line" fill="black" d="M345 2350 l-350 -350 325 -325 325 -325 -325 -325 -325 -325 353 -353 352 -352 0 303 0 302 350 0 350 0 0 100 0 100 -350 0 -350 0 0 550 0 550 350 0 350 0 0 100 0 100 -350 0 -350 0 -2 300 -3 300 -350 -350z M1600 1350 l0 -1350 100 0 100 0 0 1350 0 1350 -100 0 -100 0 0 -1350z"/></g></svg>
					line	</svg>
	route	/swu/svg/font/{text}	SVG with font
		line	Create an SVG with font using Formal SignWriting in ASCII (SWU)
		parameter	text	AS20310S26b02S33100M521x547S33100482x483S20310506x500S26b02503x520	string	The name of sign
		method	GET	retrieve SVG with font
			code	$timein = microtime(true);
			code	$req = $app->request();
			code	if ($req->get('throwStatus')=='500') {haltNoDatabase();}
			code	$app->contentType('image/svg+xml;charset=utf-8');
			code	$svg = SignWriting\svg($text,true);
			code	$searchTime = searchtime($timein);
			code	header("Search-Time: " . $searchTime);
			code	echo $svg;
			request	collection text
				response	200	image/svg+xml;charset=utf-8
					line	<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="49" height="69" viewBox="476 466 49 69">
					line	  <text font-size="0">AS10011S10019S2e704S2e748M525x535S2e748483x510S10011501x466S2e704510x500S10019476x475</text>
					line	  <g transform="translate(483,510)"><text class="sym-fill" style="pointer-events:none;font-family:'SuttonSignWritingFill';font-size:30px;fill:white;">􋛩</text><text class="sym-line" style="pointer-events:none;font-family:'SuttonSignWritingLine';font-size:30px;fill:black;">󻛩</text></g>
					line	  <g transform="translate(501,466)"><text class="sym-fill" style="pointer-events:none;font-family:'SuttonSignWritingFill';font-size:30px;fill:white;">􀀒</text><text class="sym-line" style="pointer-events:none;font-family:'SuttonSignWritingLine';font-size:30px;fill:black;">󰀒</text></g>
					line	  <g transform="translate(510,500)"><text class="sym-fill" style="pointer-events:none;font-family:'SuttonSignWritingFill';font-size:30px;fill:white;">􋚥</text><text class="sym-line" style="pointer-events:none;font-family:'SuttonSignWritingLine';font-size:30px;fill:black;">󻚥</text></g>
					line	  <g transform="translate(476,475)"><text class="sym-fill" style="pointer-events:none;font-family:'SuttonSignWritingFill';font-size:30px;fill:white;">􀀚</text><text class="sym-line" style="pointer-events:none;font-family:'SuttonSignWritingLine';font-size:30px;fill:black;">󰀚</text></g>
					line	</svg>
group	user	SignPuddle 3 collections are organized by country and language codes
	line	
	line	### Country code
	line	The country codes are from ISO-3166.
	line	Each country is coded with two uppercase letters.
	line	
	line	### Language code
	line	The language codes are from ISO-639-1 for spoken languages and ISO-639-3 for sign languages.
	line	Each spoken language is coded with two lowercase letters.
	line	Each sign language is coded with three lowercase letters.
	route	/user/who/	Who uses SignWriting?	List of countries with size and activity.
		method	GET	Retrieve country list	The available countries where signs are available.
			request	user-who
				response	200	text/plain
					line	BR
					line	US
	route	/user/salt	Salt is used for request validations	A string for accounting and validation
		method	GET	String for accounting and validation
			code	  echo userSalt();
			request	user salt
				response	200	text/plain
					line	e3bedc9e9f83cb9dd7ae61250b9e6921
	route	/user/login	User login	Validation of user with salted password
		method	POST	Process log in to server
			code	  $data = $app->request->getbody();
			code	  $data = json_decode($data,true);
			code	  $results = userVerify($data['username'],$data['salt'],$data['salted']);
			code	  $return = array();
			code	  $return['meta']=array();
			code	  $return['results']=$results;
			code	  $return['meta']['method']='POST';
			code	  $return['meta']['location']='/user/login';
			code	  $return['meta']['searchTime'] = searchtime($timein);
			code	  echo json_pretty($return);
			request	verify user
				line	{"user":"anonymous","salt":"af77...","salted":"2793f..."}
				response	200	text/plain
					line	{"user-profile":""}
