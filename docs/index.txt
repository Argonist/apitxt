root	apitxt	ApiTxt	https://signpuddle.com/apitxt/
	line	> v1.0.0
	line	
	line	+ [txt](index.txt) - ApiTxt format
	line	+ [json](index.json) - array of JSON objects
	line	+ [md](index.md) - API Blueprint
	line	+ [html](index.html) - HTML documentation
	line	
	line	
	line	ApiTxt defines a highly structured plain text format used to define multiple facets of a website api.
	line	Each line in an ApiTxt document is a self-contained element which starts with a name and is followed by &lt;TAB> separated fields.
	line	Writing ApiTxt documents is easier when tabs and spaces appear different, so use a plain text editor and turn on the invisible characters option.
	line	
	line	## Input and Output Formats
	line	The various formats are used to define the structure and function of a website API.
	line	The original source is written in ApiTxt format and transformed into an array of JSON objects.
	line	The JSON objects are used to write other formats, including API Blueprint.
	line	
	line	### ApiTxt Format (txt)
	line	ApiTxt format uses plain text divided into multiple lines, where each line contains &lt;TAB> delimited fields.
	line	Writing ApiTxt documents is easier when tabs and spaces appear different, so use a plain text editor and turn on the invisible characters option.
	line	
	line	### Array of JSON Objects (json)
	line	Each line of ApiTxt format is converted into a JSON object or added to an existing object.  The various objects are stored in an ordered array.
	line	
	line	### API Blueprint (md)
	line	[API Blueprint](https://apiblueprint.org/) is a high-level API description language for web APIs. API Blueprint is widely supported with various tooling available.
	line	
	line	#### HTML Documentaion (html)
	line	The HTML documentation is generated from the API Blueprint document using the project [bukalapak/snowboard](https://github.com/bukalapak/snowboard/), written in golang.
	line	
	line	#### PHP Server (php)
	line	The PHP server is written for the PHP project [Slim Framework v2](https://docs.slimframework.com/) to create the functional web API.
	line	The website directory contains an .htaccess file for an Apache server with PHP support.
	line	Alternatively, the server can be started with a shell script (start_server.sh) using PHP's built in web server and a custom rewrite.php file.
	line	
	line	## Transformations
	line	Python programs and shell scripts are used to read and write a variety of data formats including plain text, JSON data, API Blueprint, HTML and PHP scripts.
	line	
	line	### Plain Text to JSON Objects (txt2json)
	line	The primary transformation is from the plain text format to an array of JSON objects.
	line	
	line	### JSON Objects back to Plain Text (json2txt)
	line	The transformation can be reversed, resulting in a document that is properly structured with standardized indenting.
	line	
	line	### JSON Objects to API Blueprint (json2md)
	line	The API Blueprint document is created from an array of JSON objects.
	line	Each object is written as a section of the API Blueprint document using a markdown syntax.
	line	
	line	### JSON Objects to PHP Server (json2php)
	line	A functional PHP server is built from the JSON objects for the Slim Framework v2.
	line	The server responses can be based on prewritten responses or functional PHP code using URL parameters and query parameters.
	line	
	line	### Plain Text to Tested Mock Servers (txt2mock)
	line	This script calls the previous scripts to create, check, and build the various website API documents.
	line	Multiple calls to [bukalapak/snowboard](https://github.com/bukalapak/snowboard/) are used to check the validity of the API Blueprint, to create the HTML documentation, and to create a mock server.
	line	
	route	/	Index
		line	The index page contains information about the web API and the routes available.
		method	GET	Get the index page
			response	200	text/plain
				line	The website includes various routes:
				line	* /root
				line	* /group
				line	* /route
				line	* /parameter
				line	* /method
				line	* /request
				line	* /response
				line	* /header
				line	* /line
				line	* /code
group	elements	ApiTxt uses ten types of element to define an API.
	line	root, group, route, parameter, method, request, response, header, line, and code.
	line	
	route	/root	root
		line	Every document should start with a root element.
		line	After the root, the other elements are used to quickly create complex website APIs.
		line	The order of the lines matters and will effect the structure of the JSON objects.
		line	
		line	There are two groups of elements, the frame elements and the detail elements.
		line	The frame elements structure a website api and the detail elements attach to a previous frame element.
		line	
		line	### Frame elements
		line	There are six frame elements: root, group, route, method, request, and response.
		line	The lines are written in a specific order to create an array of JSON objects.
		line	
		line	**route organization**
		line	
		line	An ApiTxt document starts with a root, or an assumed root.
		line	Any route that occur before a group element, will be associated with the root.
		line	Groups are always associated with the root.
		line	Group elements can contain routes.
		line	
		line	```
		line	    root
		line	      | - routes
		line	      | - groups
		line	            | - routes
		line	```
		line	
		line	**route structure**
		line	
		line	A route can be associated with a variety of HTTP methods.
		line	Each method can have several requests and responses.
		line	Any response before a request will assume a generic request.
		line	Any response after a request will be associated with that request.
		line	```
		line	    route
		line	      | - methods
		line	        | - responses
		line	        | - requests
		line	              | - responses
		line	```
		line	## Detail elements
		line	There are four detail elements: line, code, parameter, and header.  The detail lines attach to a previous frame element if correctly structured.
		line	
		line	**single line elements**
		line	```
		line	    lines for all frame elements
		line	
		line	    parameters for route
		line	
		line	    codes for method
		line	
		line	    headers for request and response
		line	```
		line	
		method	GET	Get root definition
			line	Every document should start with a root element.
			line	
			line	**root line**
			line	
			line	root &lt;TAB> name &lt;TAB> title &lt;TAB> host
			line	
			line	+ field 1 - name - uniquely identifies a document
			line	+ field 2 - title - name of the document
			line	+ field 3 - host - website URL
			line	
			line	**root example**
			line	
			line	root &lt;TAB> apitxt &lt;TAB> ApiTxt &lt;TAB> https://signpuddle.com/apitxt
			line	
			line	
			line	**root line relationships**
			line	```
			line	    root
			line	     | - lines
			line	     | - routes
			line	     | - groups
			line	```
			line	
			line	**root object**
			line	```json
			line	{"root":
			line	  "root" : field[1],
			line	  "title" : field[2],
			line	  "host" : field[3],
			line	  "lines" : []
			line	}
			line	```
			request	the root definition
				response	200	text/plain
					line	Every document should start with a root element.
					line	
					line	**root line**
					line	
					line	root<TAB>name<TAB>title<TAB>host
					line	
					line	+ field 1 - name - uniquely identifies a document
					line	+ field 2 - title - name of the document
					line	+ field 3 - host - website URL
					line	
					line	**example**
					line	
					line	root<TAB>apitxt<TAB>ApiTxt<TAB>https://signpuddle.com/apitxt
					line	
					line	
					line	**root line relationships**
					line	```
					line	    root
					line	     | - lines
					line	     | - routes
					line	     | - groups
					line	```
					line	
					line	**root object**
					line	```json
					line	{"root":
					line	  "root" : field[1],
					line	  "title" : field[2],
					line	  "host" : field[3],
					line	  "lines" : []
					line	}
					line	```
	route	/group	group
		method	GET	Get group definition
			line	The group organizes resources into sections
			line	
			line	**group line**
			line	
			line	group &lt;TAB> name &lt;TAB> description
			line	
			line	+ field 1 - name - the short name used for sections
			line	+ field 2 - description - information about the group
			line	
			line	**group example**
			line	
			line	group &lt;TAB> Section name &lt;TAB> an example section
			line	
			line	**group line relationships**
			line	```
			line	    group
			line	     | - lines
			line	     | - routes
			line	```
			line	
			line	**group object**
			line	```json
			line	{"group":
			line	  "group" : field[1],
			line	  "description" : field[2],
			line	  "lines": []
			line	}
			line	```
			request	the group definition
				response	200	text/plain
					line	The group organizes resources into sections
					line	
					line	**group line**
					line	
					line	group<TAB>name<TAB>description
					line	
					line	+ field 1 - name - the short name used for sections
					line	+ field 2 - description - information about the group
					line	
					line	**group example**
					line	
					line	group<TAB>Section name<TAB>an example section
					line	
					line	**group line relationships**
					line	```
					line	    group
					line	     | - lines
					line	     | - routes
					line	```
					line	
					line	**group object**
					line	```json
					line	{"group":
					line	  "group" : field[1],
					line	  "description" : field[2],
					line	  "lines": []
					line	}
					line	```
	route	/route	route
		method	GET	Get route definition
			line	The route element allows access to a resource
			line	
			line	**route line**
			line	
			line	route &lt;TAB> URI template &lt;TAB> name &lt;TAB> description
			line	
			line	+ field 1 - URI template - a resource pattern with parameters
			line	+ field 2 - name - the route name must be unique
			line	+ field 3 - description - information about the resource
			line	
			line	**route example**
			line	
			line	route &lt;TAB> /example &lt;TAB> an example route &lt;TAB> a description of the route
			line	
			line	**route line relationships**
			line	```
			line	    route
			line	     | - lines
			line	     | - parameters
			line	     | - methods
			line	```
			line	
			line	**route object**
			line	```json
			line	{"route":
			line	  "route" : field[1],
			line	  "name" : field[2],
			line	  "description" : field[3],
			line	  "lines": [],
			line	  "parameters": []
			line	}
			line	```
			request	the route definition
				response	200	text/plain
					line	The route element allows access to a resource
					line	
					line	**route line**
					line	
					line	route<TAB>URI template<TAB>name<TAB>description
					line	
					line	+ field 1 - URI template - a resource pattern with parameters
					line	+ field 2 - name - the route name must be unique
					line	+ field 3 - description - information about the resource
					line	
					line	**route example**
					line	
					line	route<TAB>/example<TAB>an example route<TAB>a description of the route
					line	
					line	**route line relationships**
					line	```
					line	    route
					line	     | - lines
					line	     | - parameters
					line	     | - methods
					line	```
					line	
					line	**route object**
					line	```json
					line	{"route":
					line	  "route" : field[1],
					line	  "name" : field[2],
					line	  "description" : field[3],
					line	  "lines": [],
					line	  "parameters": []
					line	}
					line	```
	route	/parameter	parameter
		method	GET	Get parameter definition
			line	The parameter element is applied to the previous route
			line	
			line	**parameter line**
			line	
			line	parameter &lt;TAB> name &lt;TAB> example &lt;TAB> type &lt;TAB> description
			line	
			line	+ field 1 - name - the name of a parameter for a route
			line	+ field 2 - example - an example value for the parameter
			line	+ field 3 - type - the parameter type, such as "string", "number", "string, optional", "string, required"
			line	+ field 4 - description - information about the parameter
			line	
			line	**parameter example**
			line	
			line	parameter &lt;TAB> country_code &lt;TAB> US &lt;TAB> string &lt;TAB> the country code of interest
			line	
			line	**parameter line relationships**
			line	
			line	parameter lines are added to a parameters array
			line	
			line	**parameters array**
			line	```json
			line	{"parameters":
			line	  [
			line	    {
			line	      "name" : " field[1],
			line	      "example" : field[2],
			line	      "type" : field[3],
			line	      "description" : field[4]
			line	    }
			line	  ]
			line	}
			line	```
			request	the parameter definition
				response	200	text/plain
					line	The parameter element is applied to the previous route
					line	
					line	**parameter line**
					line	
					line	parameter<TAB>name<TAB>example<TAB>type<TAB>description
					line	
					line	+ field 1 - name - the name of a parameter for a route
					line	+ field 2 - example - an example value for the parameter
					line	+ field 3 - type - the parameter type, such as "string", "number", "string, optional", "string, required"
					line	+ field 4 - description - information about the parameter
					line	
					line	**parameter example**
					line	
					line	parameter<TAB>country_code<TAB>US<TAB>string<TAB>the country code of interest
					line	
					line	**parameter line relationships**
					line	
					line	parameter lines are added to a parameters array
					line	
					line	**parameters array**
					line	```json
					line	{"parameters":
					line	  [
					line	    {
					line	      "name" : " field[1],
					line	      "example" : field[2],
					line	      "type" : field[3],
					line	      "description" : field[4]
					line	    }
					line	  ]
					line	}
					line	```
	route	/method	method
		method	GET	Get method definition
			line	The method element represents an action that can be performed on a route
			line	
			line	**method line**
			line	
			line	method &lt;TAB> HTTP method &lt;TAB> name &lt;TAB> description
			line	
			line	+ field 1 - HTTP method - the type of action to perform: GET, POST, PUT, DELETE
			line	+ field 2 - name - the name of the action
			line	+ field 3 - description - information about the method
			line	
			line	**method example**
			line	
			line	method &lt;TAB> GET &lt;TAB> Get an example &lt;TAB> This method retrieves an example document
			line	
			line	**method line relationships**
			line	```
			line	    method
			line	     | - lines
			line	     | - codes
			line	     | - requests
			line	     | - responses
			line	```
			line	
			line	
			line	**method object**
			line	```json
			line	{
			line	  "method" : field[1],
			line	  "name" : field[2],
			line	  "description" : field[3],
			line	  "lines" : [],
			line	  "codes" : [],
			line	  "dialog" : [
			line	    {
			line	      "request" : {},
			line	      "responses" : []
			line	    }
			line	  ]
			line	}
			line	```
			request	the method definition
				response	200	text/plain
					line	The method element represents an action that can be performed on a route
					line	
					line	**method line**
					line	
					line	method<TAB>HTTP method<TAB>name<TAB>description
					line	
					line	+ field 1 - HTTP method - the type of action to perform: GET, POST, PUT, DELETE
					line	+ field 2 - name - the name of the action
					line	+ field 3 - description - information about the method
					line	
					line	**method example**
					line	
					line	method<TAB>GET<TAB>Get an example<TAB>This method retrieves an example document
					line	
					line	**method line relationships**
					line	```
					line	    method
					line	     | - lines
					line	     | - codes
					line	     | - requests
					line	     | - responses
					line	```
					line	
					line	
					line	**method object**
					line	```json
					line	{
					line	  "method" : field[1],
					line	  "name" : field[2],
					line	  "description" : field[3],
					line	  "lines" : [],
					line	  "codes" : [],
					line	  "dialog" : [
					line	    {
					line	      "request" : {},
					line	      "responses" : []
					line	    }
					line	  ]
					line	}
					line	```
	route	/request	request
		method	GET	Get request definition
			line	The request element is associated with a specific method and can be paired with multiple responses.
			line	
			line	**request line**
			line	
			line	request &lt;TAB> name &lt;TAB> type
			line	
			line	+ field 1 - name - uniquely identifies a request
			line	+ field 2 - type - the content type of the request body
			line	
			line	**request example**
			line	
			line	request &lt;TAB> matching text within request body &lt;TAB> plain/text
			line	
			line	**request line relationships**
			line	```
			line	    request
			line	     | - headers
			line	     | - lines
			line	```
			line	
			line	**request object**
			line	```json
			line	{
			line	  "name" : field[1],
			line	  "type" : field[2],
			line	  "headers" : {},
			line	  "lines" : []
			line	}
			line	```
			request	the request definition
				response	200	text/plain
					line	The request element is associated with a specific method and can be paired with multiple responses.
					line	
					line	**request line**
					line	
					line	request<TAB>name<TAB>type
					line	
					line	+ field 1 - name - uniquely identifies a request
					line	+ field 2 - type - the content type of the request body
					line	
					line	**request example**
					line	
					line	request<TAB>matching text within request body<TAB>plain/text
					line	
					line	**request line relationships**
					line	```
					line	    request
					line	     | - headers
					line	     | - lines
					line	```
					line	
					line	**request object**
					line	```json
					line	{
					line	  "name" : field[1],
					line	  "type" : field[2],
					line	  "headers" : {},
					line	  "lines" : []
					line	}
					line	```
					line	
	route	/response	response
		method	GET	Get response definition
			line	The response element is associated with a specific request, or associated with a specific method with an assumed generic request.
			line	
			line	**response line**
			line	
			line	response &lt;TAB> status &lt;TAB> type
			line	
			line	+ field 1 - status - an HTTP response code indicating the status of the request
			line	+ field 2 - type - the content type of the response body
			line	
			line	**response example**
			line	
			line	response &lt;TAB> 200 &lt;TAB> plain/text
			line	
			line	**response line relationships**
			line	```
			line	    response
			line	     | - headers
			line	     | - lines
			line	```
			line	
			line	**response object**
			line	```json
			line	{
			line	  "status" : field[1],
			line	  "type" : field[2],
			line	  "headers" : {},
			line	  "lines" : []
			line	}
			line	```
			request	the response definition
				response	200	text/plain
					line	The response element is associated with a specific request, or associated with a specific method with an assumed generic request.
					line	
					line	**response line**
					line	
					line	response<TAB>status<TAB>type
					line	
					line	+ field 1 - status - an HTTP response code indicating the status of the request
					line	+ field 2 - type - the content type of the response body
					line	
					line	**response example**
					line	
					line	response<TAB>200<TAB>plain/text
					line	
					line	**response line relationships**
					line	```
					line	    response
					line	     | - headers
					line	     | - lines
					line	```
					line	
					line	**response object**
					line	```json
					line	{
					line	  "status" : field[1],
					line	  "type" : field[2],
					line	  "headers" : {},
					line	  "lines" : []
					line	}
					line	```
					line	
	route	/header	header
		method	GET	Get header definition
			line	The header element is applied to a preceding route
			line	
			line	**header line**
			line	
			line	header &lt;TAB> name &lt;TAB> value
			line	
			line	+ field 1 - name - the header variable name
			line	+ field 2 - value - the header variable value
			line	
			line	**header example**
			line	
			line	header &lt;TAB> X-Powered-By &lt;TAB> ApiTxt
			line	
			line	**header object**
			line	```json
			line	{ field[1] : field[2] }
			line	```
			request	the header definition
				response	200	text/plain
					line	The header element is applied to a preceding route
					line	
					line	**header line**
					line	
					line	header<TAB>name<TAB>value
					line	
					line	+ field 1 - name - the header variable name
					line	+ field 2 - value - the header variable value
					line	
					line	**header example**
					line	
					line	header<TAB>X-Powered-By<TAB>ApiTxt
					line	
					line	**header object**
					line	```json
					line	{ field[1] : field[2] }
					line	```
	route	/line	line
		method	GET	Get line definition
			line	The line element adds additional text to frame elements.
			line	
			line	For the root, group, route, and method, the lines add details to an element.  For the request and response elements, the line represents the body of the request or response.
			line	
			line	The text of the line is everything after the string "line &lt;TAB>".
			request	the line definition
				response	200	text/plain
					line	The line element adds additional text to frame elements.
					line	
					line	For the root, group, route, and method, the lines add details to an element.  For the request and response elements, the line represents the body of the request or response.
					line	
					line	The text of the line is everything after the string "line <tab>".
	route	/code	code
		method	GET	Get code definition
			line	The code element adds functionality to the method element.
			line	
			line	The code element contains programming text.  ApiTxt comes integrated with the PHP project the Slim Framework v2.  The conversion to working PHP adds boilerplate details for routes and method, with named parameters and query parameters available as functional variables.
			line	
			line	The text of the code is everything after the string "code &lt;TAB>".
			request	the code definition
				response	200	text/plain
					line	The code element adds functionality to the method element.
					line	
					line	The code element contains programming text.  ApiTxt comes integrated with the PHP project the Slim Framework v2.  The conversion to working PHP adds boilerplate details for routes and method, with named parameters and query parameters available as functional variables.
					line	
					line	The text of the code is everything after the string "code <tab>".
